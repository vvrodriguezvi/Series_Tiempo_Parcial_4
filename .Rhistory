dic2016a=1*(seq_along(serie_original) == 300),
julio2021a=1*c(rep(0,354),rep(1,15))),
transfer=list(c(1, 0),c(1, 0),c(0, 0),
c(0, 0), c(0, 0)))
modelo3_val %>% coeftest()
modelo3
View(base)
base_compl <- read_excel("anexo-exportaciones-cafe-carbon-petroleo-ferroniquel-no-tradicionales-sep22.xlsx",
skip=12) %>% clean_names()
base <- base_compl[1:442, c(1,3)] %>%
rename("valor" = "miles_de_dolares_fob_3") %>%
na.omit(base)
x <- seq(13, 399, by=13)
base <- base[-(x), ]
exp_cafe <-  data.frame(fecha=seq(as.Date("1992/1/1"),
as.Date("2022/9/1"), "months"),
valor=base[1:369, 2])
View(base_compl)
View(base)
exp_cafe$valor <- exp_cafe$valor/100000
serie_original <- ts(exp_cafe$valor, start=c(1992,1),
frequency = 12)
cafe_lambda <- BoxCox.lambda(serie_original)
cafe_lambda
serie_boxcox <- BoxCox(serie_original,
lambda=cafe_lambda)
serie_log <- log(serie_original)
win.graph()
par(mfrow=c(1,2))
serie_original %>% plot(main="Serie Original",
las=1)
serie_boxcox %>% plot(main="Serie Transformada - boxcox",
las=1)
win.graph()
par(mfrow=c(1,2))
serie_original %>% plot(main="Serie Original",
las=1)
serie_log %>% plot(main="Serie Transformada - log",
las=1)
serieOriginal_decompose <- decompose(serie_original, type="multiplicative")
serieBox_decompose <- decompose(serie_boxcox, type="additive")
plot(serieBox_decompose)
modelo1 <- auto.arima(serie_original, stepwise = FALSE,
approximation = FALSE)
modelo1 %>% checkresiduals()
modelo1 %>% coeftest()
modelo1$residuals %>% shapiro.test()
modelo1$residuals %>% qqnorm()
modelo1$residuals %>% qqline()
modelo2 <- auto.arima(serie_boxcox, stepwise = FALSE,
approximation = FALSE)
modelo2 %>% checkresiduals()
modelo2 %>% coeftest()
modelo2$residuals %>% shapiro.test()
modelo2$residuals %>% qqnorm()
modelo2$residuals %>% qqline()
delta <- seq(0.05, 0.95, 0.05)
aic_1 <- vector()
ljungbox1 <- vector()
i = 0
for(d in delta){
i = i+1
modelo_outl <- tso(serie_original, delta=d)
aic_1[i] <- modelo_outl$fit$aic
ljungbox1[i] <- checkresiduals(modelo_outl$fit,
plot = FALSE)$p.value
}
aic1 <- which.min(aic_1)
delta1 <- delta[aic1]
delta1
modelo3 <- tso(serie_original, delta=0.8)
modelo3
base_compl <- read_excel("anexo-exportaciones-cafe-carbon-petroleo-ferroniquel-no-tradicionales-sep22.xlsx",
skip=12) %>% clean_names()
base <- base_compl[1:442, c(1,3)] %>%
rename("valor" = "miles_de_dolares_fob_3") %>%
na.omit(base)
x <- seq(13, 399, by=13)
base <- base[-(x), ]
exp_cafe <-  data.frame(fecha=seq(as.Date("1992/1/1"),
as.Date("2022/9/1"), "months"),
valor=base[1:369, 2])
exp_cafe$valor <- exp_cafe$valor/100000
View(md)
View(md)
# predicciones
# modelo 1: modelo sin intervención: serie original
exp_cafe %>% dim()
library(tidyverse)
require(TSA)
require(readxl)
require(magrittr)
require(astsa)
library(janitor)
library(ggplot2)
require(forecast)
require(tseries)
require(lmtest)
library(stats)
library(TSstudio)
require(tsoutliers)
# predicciones
# modelo 1: modelo sin intervención: serie original
exp_cafe %>% dim()
str(exp_cafe)
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line()
base_compl <- read_excel("anexo-exportaciones-cafe-carbon-petroleo-ferroniquel-no-tradicionales-sep22.xlsx",
skip=12) %>% clean_names()
base <- base_compl[1:442, c(1,3)] %>%
rename("valor" = "miles_de_dolares_fob_3") %>%
na.omit(base)
x <- seq(13, 399, by=13)
base <- base[-(x), ]
exp_cafe <-  data.frame(fecha=seq(as.Date("1992/1/1"),
as.Date("2022/9/1"), "months"),
valor=base[1:369, 2])
exp_cafe$valor <- exp_cafe$valor/100000
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line()
exp_cafe %>% ggplot(aes(x=fecha, y=valor, col = "red"))+geom_line()
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line()
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="red")
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="skyblue")
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="darkblue")
modelo1
modelo1 %>% coeftest()
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="blue")
exp_cafe %>% head(4)
exp_cafe %>% tail(4)
0.8946446*1000
View(exp_cafe)
base_compl <- read_excel("anexo-exportaciones-cafe-carbon-petroleo-ferroniquel-no-tradicionales-sep22.xlsx",
skip=12) %>% clean_names()
# Seleccionamos la fila 4, relacionada con las exportaciones en  y
# las columnas 1 hasta 442:
base <- base_compl[1:442, c(1,3)] %>%
rename("valor" = "miles_de_dolares_fob_3") %>%
na.omit(base)
# Al final de cada año había una fila con un total por año, se quitó de la base.
x <- seq(13, 399, by=13)
base <- base[-(x), ]
## Se tienes datos mensuales, se crea data frama con las fechas(enero 1992-sep 2022)
exp_cafe <-  data.frame(fecha=seq(as.Date("1992/1/1"),
as.Date("2022/9/1"), "months"),
valor=base[1:369, 2])
0.8946446*1000
0.8946446*100000
exp_cafe$valor <- exp_cafe$valor/100000
serie_original <- ts(exp_cafe$valor, start=c(1992,1),
frequency = 12)
modelo1 <- auto.arima(serie_original, stepwise = FALSE,
approximation = FALSE)
modelo1 %>% coeftest()
predict(modelo1, n.ahead = 12)
train1 <- window(serie_original, start=time(serie_original)[1],
end = time(serie_original)[length(serie_original) - 12])
test2 <- window(serie_original, start = time(serie_original)[length(serie_original)
- 12 + 1],
end = time(serie_original)[length(serie_original)])
ts_info(train1)
test1 <- window(serie_original, start = time(serie_original)[length(serie_original)
- 12 + 1],
end = time(serie_original)[length(serie_original)])
ts_info(test1)
modelo1.train <- auto.arima(train1, stepwise = FALSE,
approximation = FALSE)
modelo1.train
modelo1
checkresiduals(modelo1.train)
fore1 <- forecast(modelo1.train, h=12)
accuracy(fore1, test)
test_forecast(actual = serie_original, forecast.obj = fore1,
test = test)
naive_model1 <- naive(train1, h = 12)
test_forecast(actual = serie_original,
forecast.obj = naive_model1,
test = test)
accuracy(naive_model1, test)
accuracy(fore1, test)
snaive_model1 <- snaive(train1, h = 12)
test_forecast(actual = serie_original,
forecast.obj = snaive_model1,
test = test)
accuracy(snaive_model1, test)
delta <- seq(0.1, 0.90, 0.1)
aic_1 <- vector()
ljungbox1 <- vector()
i = 0
for(d in delta){
i = i+1
modelo_outl <- tso(train1, delta=d)
aic_1[i] <- modelo_outl$fit$aic
ljungbox1[i] <- checkresiduals(modelo_outl$fit,
plot = FALSE)$p.value
}
which.min(aic_1)
delta[8]
ljungbox1[8]
modelo_train2 <- tso(train1, delta=0.8)
modelo_train2
modelo_train2$fit$residuals %>% checkresiduals()
modelo_train2$fit %>% checkresiduals()
ljungbox1[8]
modelo_train2$fit$residuals %>% shapiro.test()
modelo_train2$fit$residuals %>% jarque.bera.test()
newxreg <- outliers.effects(modelo_train2$outliers,
length(train1) + npred)
npred <- 12
npred <- 12
newxreg <- outliers.effects(modelo_train2$outliers,                            length(train1) + npred)
newxreg <- ts(newxreg[-seq_along(train1),],
start = 1952)
npred <- 12
newxreg <- outliers.effects(modelo_train2$outliers,
length(train1) + npred)
newxreg <- ts(newxreg[-seq_along(train1),],
start =time(serie_original)[length(serie_original)
- 12 + 1])
fore2 <- forecast(modelo_train2$fit, h=12,
xreg = newxreg)
accuracy(fore2, test1)
accuracy(fore1, test1)
accuracy(fore2, test1)
df_train <- data.frame(fecha=
exp_cafe$fecha[1:length(train1)],
real=
exp_cafe$valor[1:length(train1)],
pred1 = modelo1.train$fitted,
pred2 = modelo_train2$fit$fitted)
df_train %> % ggplot(aes(x=fecha, y=real), col="black")+
geom_line()+
geom_line(aes(x=fecha, y=pred1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=pred2),col="red", lty=3)
df_train %>% ggplot(aes(x=fecha, y=real), col="black")+
geom_line()+
geom_line(aes(x=fecha, y=pred1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=pred2),col="red", lty=3)
test1
369-12
exp_cafe$fecha[358:369]
df_test <- data.frame(fecha=
exp_cafe$fecha[358:369],
real=
exp_cafe$valor[358:369],
pred1 = fore1$mean, pred2 = fore2$mean,
li1=fore1$lower[,2], ls1=fore1$upper[,2],
li2=fore2$lower[,2], ls2=fore2$upper[,2])
df_test %>% ggplot(aes(x=fecha, y=real), col="black")+
geom_line()+
geom_line(aes(x=fecha, y=pred1),col="blue")+
geom_line(aes(x=fecha, y=li1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=ls1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=pred2),col="red", lty=3)+
geom_line(aes(x=fecha, y=li2),col="red", lty=3)+
geom_line(aes(x=fecha, y=ls2),col="red", lty=3)
modelo2 <- auto.arima(serie_boxcox, stepwise = FALSE,
approximation = FALSE)
lambda
cafe_lambda
modelo2 <- auto.arima(serie_boxcox, stepwise = FALSE,
approximation = FALSE)
modelo2 %>% coeftest()
predict(modelo2, n.ahead = 12)
train2 <- window(serie_boxcox, start=time(serie_boxcox)[1],
end = time(serie_boxcox)[length(serie_boxcox) - 12])
ts_info(train2)
test2 <- window(serie_boxcox, start = time(serie_boxcox)[length(serie_boxcox)
- 12 + 1],
end = time(serie_boxcox)[length(serie_boxcox)])
ts_info(test2)
modelo2.train <- auto.arima(train2, stepwise = FALSE,
approximation = FALSE)
modelo2
modelo2.train
checkresiduals(modelo2.train)
train2 <- window(serie_boxcox, start=time(serie_boxcox)[1],
end = time(serie_boxcox)[length(serie_boxcox) - 12])
ts_info(train2)
test2 <- window(serie_boxcox, start = time(serie_boxcox)[length(serie_boxcox)
- 12 + 1],
end = time(serie_boxcox)[length(serie_boxcox)])
ts_info(test2)
modelo2.train <- auto.arima(train2, stepwise = FALSE,
approximation = FALSE)
checkresiduals(modelo2.train)
modelo2.train <- auto.arima(train2, stepwise = FALSE,
approximation = FALSE)
checkresiduals(modelo2.train)
fore3 <- forecast(modelo2.train, h=12)
accuracy(fore3, test)
test_forecast(actual = serie_boxcox, forecast.obj = fore3,
test = test)
naive_model1 <- naive(train2, h = 12)
test_forecast(actual = serie_boxcox,
forecast.obj = naive_model1,
test = test)
accuracy(naive_model1, test)
snaive_model1 <- snaive(train2, h = 12)
test_forecast(actual = serie_boxcox,
forecast.obj = snaive_model1,
test = test)
fore3
fore3*100000
fore3$fitted*100000
fore3
fore3$mean
modelo2.train
accuracy(naive_model1, test)
snaive_model1 <- snaive(train2, h = 12)
test_forecast(actual = serie_boxcox,
forecast.obj = snaive_model1,
test = test)
accuracy(snaive_model1, test)
delta <- seq(0.1, 0.90, 0.1)
aic_1 <- vector()
ljungbox1 <- vector()
i = 0
for(d in delta){
i = i+1
modelo_outl <- tso(train2, delta=d)
aic_1[i] <- modelo_outl$fit$aic
ljungbox1[i] <- checkresiduals(modelo_outl$fit,
plot = FALSE)$p.value
}
which.min(aic_1)
delta[8]
ljungbox1[8]
modelo_train2 <- tso(train2, delta=0.8)
modelo_train2
modelo_train2$fit %>% checkresiduals()
modelo_train2$fit$residuals %>% shapiro.test()
modelo_train2$fit$residuals %>% jarque.bera.test()
npred <- 12
newxreg <- outliers.effects(modelo_train2$outliers,
length(train2) + npred)
newxreg <- ts(newxreg[-seq_along(train2),],
start =time(serie_boxcox)[length(serie_boxcox)
- 12 + 1])
fore4 <- forecast(modelo_train2$fit, h=12,
xreg = newxreg)
accuracy(fore3, test2)
accuracy(fore4, test2)
df_train <- data.frame(fecha=
exp_cafe$fecha[1:length(train2)],
real=
exp_cafe$valor[1:length(train2)],
pred1 = modelo2.train$fitted,
pred2 = modelo_train2$fit$fitted)
df_train %>% ggplot(aes(x=fecha, y=real), col="black")+
geom_line()+
geom_line(aes(x=fecha, y=pred1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=pred2),col="red", lty=3)
df_train <- data.frame(fecha=
exp_cafe$fecha[1:length(train2)],
real=
exp_cafe$valor[1:length(train2)],
pred1 = modelo2.train$fitted,
pred2 = modelo_train2$fit$fitted)
df_train %>% ggplot(aes(x=fecha, y=real), col="black")+
geom_line()+
geom_line(aes(x=fecha, y=pred1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=pred2),col="red", lty=3)
inv(modelo2.train$fitted)
InvBoxCox(modelo2.train$fitted, lambda = cafe_lambda)
df_train <- data.frame(fecha=
exp_cafe$fecha[1:length(train2)],
real=
exp_cafe$valor[1:length(train2)],
pred1 = InvBoxCox(modelo2.train$fitted, lambda = cafe_lambda),
pred2 = InvBoxCox(modelo_train2$fit$fitted, lambda = cafe_lambda))
df_train %>% ggplot(aes(x=fecha, y=real), col="black")+
geom_line()+
geom_line(aes(x=fecha, y=pred1),col="blue", lty=2)+
geom_line(aes(x=fecha, y=pred2),col="red", lty=3)
test_forecast(actual = serie_boxcox, forecast.obj = fore3,
test = test)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
require(TSA)
require(readxl)
require(magrittr)
require(astsa)
library(janitor)
library(ggplot2)
require(forecast)
require(tseries)
require(lmtest)
library(stats)
library(TSstudio)
require(tsoutliers)
# predicciones
# modelo 1: modelo sin intervención: serie original
exp_cafe %>% dim()
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="blue")
exp_cafe %>% head(4)
exp_cafe %>% tail(4)
serie_original <- ts(exp_cafe$valor, start=c(1992,1),
frequency = 12)
modelo1 <- auto.arima(serie_original, stepwise = FALSE,
approximation = FALSE)
View(base_compl)
base_compl %>% head(4)
library(tidyverse)
base_compl %>% head(4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
require(TSA)
require(readxl)
require(magrittr)
require(astsa)
library(janitor)
library(ggplot2)
require(forecast)
require(tseries)
require(lmtest)
library(stats)
library(TSstudio)
require(tsoutliers)
base_compl[ , 1:8] %>% head(4)
base_compl[ , 1:8] %>% head(c(1:4,12:16))
base_compl[ c(1:4,12:16), 1:8]
base_compl[c(1:4,12:16), 1:8]
library(kableExtra)
# Base orginal, cargada desde el sitio del DANE
base_compl <- read_excel("anexo-exportaciones-cafe-carbon-petroleo-ferroniquel-no-tradicionales-sep22.xlsx",
skip=12) %>% clean_names()
kable(base_compl[c(1:4,12:16), 1:6] )
serie_original <- ts(exp_cafe$valor, start=c(1992,1), frequency = 12)
str(serie_original)
serie_original <- ts(exp_cafe$valor, start=c(1992,1), frequency = 12)
str(serie_original)
ts_info(serie_original)
ggplot(serie_original)+geom_line(col="green")
ggplot(serie_original)
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="green")
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="#3C8483")
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="#3C8483")+labs(x = "Fecha")
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="#3C8483")+labs(x = "Fecha", y = "Exportaciones de café sin tostar (cien millones de dolares FOB)")
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="#3C8483")+labs(x = "Fecha", y = "Exportaciones de café sin tostar(cien millones de dolares FOB)")
train <- window(serie_original, start=time(serie_original)[1],
end = time(serie_original)[length(serie_original) - 12])
ts_info(train1)
test <- window(serie_original, start = time(serie_original)[length(serie_original)
- 12 + 1],
end = time(serie_original)[length(serie_original)])
ts_info(test1)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
library(tidyverse)
require(TSA)
require(readxl)
require(magrittr)
require(astsa)
library(janitor)
library(ggplot2)
require(forecast)
require(tseries)
require(lmtest)
library(stats)
library(TSstudio)
require(tsoutliers)
# Base orginal, cargada desde el sitio del DANE
base_compl <- read_excel("anexo-exportaciones-cafe-carbon-petroleo-ferroniquel-no-tradicionales-sep22.xlsx",
skip=12) %>% clean_names()
kable(base_compl[c(1:3,12:15), 1:6])%>% kable_styling(latex_options = c("condensed")) %>% row_spec(row = c(5,6), background = "#3C8483",bold = TRUE)
# Se selecciona solo las variables correspondientes a fecha y valor
# en miles de dolares de las exportaciones de café en Colombia
base <- base_compl[1:442, c(1,3)] %>%
rename("valor" = "miles_de_dolares_fob_3") %>%
na.omit(base) #eliminar fila de NA presente en la base original
# crea un vector que contiene las filas de los totales por año,
# para luego eliminar esas observaciones de la base de datos.
x <- seq(13, 399, by=13)
base <- base[-(x), ]
exp_cafe <-  data.frame(fecha=seq(as.Date("1992/1/1"),
as.Date("2022/9/1"), "months"),
valor=base[1:369, 2])
# El valor correspondiente a las exportaciones en miles dolares FOB,
# se dividio en cien mil dolares quedando el valor de las exportaciones
# en una cifra de cien millonesdes de dolares FOB.
exp_cafe$valor <- exp_cafe$valor/100000
kable(exp_cafe %>% head(4),align = "c")%>% kable_styling(latex_options = c("condensed"), position = "center")
kable(exp_cafe %>% tail(4),align = "c")%>% kable_styling(latex_options = c("condensed"), position = "center")
serie_original <- ts(exp_cafe$valor, start=c(1992,1), frequency = 12)
# Información de la serie
ts_info(serie_original)
exp_cafe %>% ggplot(aes(x=fecha, y=valor))+geom_line(col="#3C8483")+labs(x = "Fecha", y = "Exportaciones de café sin tostar (cien millones de dolares FOB)")
train <- window(serie_original, start=time(serie_original)[1],
end = time(serie_original)[length(serie_original) - 12])
ts_info(train)
test <- window(serie_original, start = time(serie_original)[length(serie_original)
- 12 + 1],
end = time(serie_original)[length(serie_original)])
ts_info(test)
mod1 <- auto.arima(serie_original, stepwise = FALSE, approximation = FALSE)
mod1
mod1 <- auto.arima(serie_original, stepwise = FALSE, approximation = FALSE)
mod1
mod1 <- auto.arima(serie_original, stepwise = FALSE, approximation = FALSE)
mod1
mod1 %>% checkresiduals(color ="green")
mod1 %>% checkresiduals(color ="#3C8483")
mod1 %>% checkresiduals(color =c("#3C8483","#3C8483","#3C8483"))
mod1 %>% checkresiduals(color =c("#3C8483"))
ggtsdisplay(serie_original, color="#3C8483")
ggtsdisplay(serie_original, theme = theme_bw())
ggtsdisplay(serie_original, theme = theme_bw(), col = "#3C8483")
ggtsdisplay(serie_original, theme = theme_bw(), col = c("#3C8483",2,3))
ggtsdisplay(serie_original, theme = theme_bw())+ theme(col="#3C8483")
mod1 %>% coeftest()
kable(mod1 %>% coeftest())
sig1 <- mod1 %>% coeftest()
sig1
